name: Build and Publish Docker Image

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install gdown
        id: install_gdown
        run: pip install gdown

      - name: Download and Prepare Model
        id: prepare_model
        env:
          # IMPORTANT: Set GDRIVE_MODEL_FILE_ID as a secret in your GitHub repository settings.
          # This ID should point to your Google Drive FOLDER containing the model files (e.g., config.json, pytorch_model.bin).
          GDRIVE_MODEL_FILE_ID: ${{ secrets.GDRIVE_MODEL_FILE_ID }}
        run: |
          if [ -z "$GDRIVE_MODEL_FILE_ID" ]; then
            echo "Error: GDRIVE_MODEL_FILE_ID secret is not set."
            echo "Please set it in your repository's Settings > Secrets and variables > Actions."
            exit 1
          fi

          # Target directory for the final model files, matching application's expectation
          MODEL_CONTENTS_TARGET_DIR="./src/outputs/checkpoint-320"
          mkdir -p "$MODEL_CONTENTS_TARGET_DIR"

          # Temporary directory to download and extract the GDrive folder
          DOWNLOAD_ROOT_DIR=$(mktemp -d)
          echo "Temporary download directory: $DOWNLOAD_ROOT_DIR"

          echo "Downloading model from Google Drive folder with ID: $GDRIVE_MODEL_FILE_ID"
          # gdown --folder with -O DOWNLOAD_ROOT_DIR downloads the GDrive folder's contents
          # directly into DOWNLOAD_ROOT_DIR.
          if ! gdown --folder "$GDRIVE_MODEL_FILE_ID" -O "$DOWNLOAD_ROOT_DIR"; then
            echo "Error: gdown failed to download the folder contents."
            echo "Contents of $DOWNLOAD_ROOT_DIR:"
            ls -A "$DOWNLOAD_ROOT_DIR"
            exit 1
          fi

          echo "Download complete. Checking contents of $DOWNLOAD_ROOT_DIR:"
          ls -A "$DOWNLOAD_ROOT_DIR"

          # Check if any files were downloaded into DOWNLOAD_ROOT_DIR
          if [ -z "$(ls -A "$DOWNLOAD_ROOT_DIR")" ]; then
            echo "Error: No files found in $DOWNLOAD_ROOT_DIR after gdown."
            echo "Please check if GDrive folder ID $GDRIVE_MODEL_FILE_ID is correct and folder is not empty."
            exit 1
          fi
          
          echo "Moving contents from $DOWNLOAD_ROOT_DIR/* to $MODEL_CONTENTS_TARGET_DIR/"
          # Move the *contents* of DOWNLOAD_ROOT_DIR to the target model directory
          if ! mv "$DOWNLOAD_ROOT_DIR"/* "$MODEL_CONTENTS_TARGET_DIR/"; then
             echo "Error: Failed to move model files."
             echo "Contents of $DOWNLOAD_ROOT_DIR (source):"
             ls -A "$DOWNLOAD_ROOT_DIR"
             echo "Contents of $MODEL_CONTENTS_TARGET_DIR (destination):"
             ls -A "$MODEL_CONTENTS_TARGET_DIR"
             exit 1
          fi

          # Clean up temporary download directory
          rm -rf "$DOWNLOAD_ROOT_DIR"

          # Verify key model files exist in the target directory (adjust filenames as needed)
          # This check now looks inside the 'checkpoint-320' subdirectory
          if [ ! -f "$MODEL_CONTENTS_TARGET_DIR/config.json" ] || [ ! -f "$MODEL_CONTENTS_TARGET_DIR/pytorch_model.bin" ]; then
            echo "Warning: Key model files (config.json or pytorch_model.bin) not found in $MODEL_CONTENTS_TARGET_DIR after preparation."
            echo "Please ensure GDRIVE_MODEL_FILE_ID points to a folder containing these files directly."
            echo "Contents of $MODEL_CONTENTS_TARGET_DIR:"
            ls -A "$MODEL_CONTENTS_TARGET_DIR"
            # Depending on your model, this might be a critical error, consider exiting:
            # exit 1 
          else
            echo "Model prepared successfully in $MODEL_CONTENTS_TARGET_DIR"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: build_and_push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/email-classification-real-estate:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/email-classification-real-estate:${{ github.sha }}
