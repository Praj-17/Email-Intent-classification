name: Build and Publish Docker Image

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install gdown
        id: install_gdown
        run: pip install gdown

      - name: Download and Prepare Model
        id: prepare_model
        env:
          # IMPORTANT: Set GDRIVE_MODEL_FILE_ID as a secret in your GitHub repository settings.
          # This ID should point to your Google Drive FOLDER containing the model files (e.g., config.json, pytorch_model.bin).
          GDRIVE_MODEL_FILE_ID: ${{ secrets.GDRIVE_MODEL_FILE_ID }}
        run: |
          if [ -z "$GDRIVE_MODEL_FILE_ID" ]; then
            echo "Error: GDRIVE_MODEL_FILE_ID secret is not set."
            echo "Please set it in your repository's Settings > Secrets and variables > Actions."
            exit 1
          fi

          # Target directory for the final model files (must match Dockerfile expectations)
          MODEL_CONTENTS_TARGET_DIR="./app/model"
          mkdir -p "$MODEL_CONTENTS_TARGET_DIR"

          # Temporary directory to download and extract the GDrive folder
          DOWNLOAD_ROOT_DIR=$(mktemp -d)
          echo "Temporary download directory: $DOWNLOAD_ROOT_DIR"

          echo "Downloading model from Google Drive folder with ID: $GDRIVE_MODEL_FILE_ID"
          # gdown --folder downloads the GDrive folder as a zip to DOWNLOAD_ROOT_DIR
          # and then extracts it into a subdirectory within DOWNLOAD_ROOT_DIR (e.g., DOWNLOAD_ROOT_DIR/<gdrive_folder_name>/)
          if ! gdown --folder "$GDRIVE_MODEL_FILE_ID" -O "$DOWNLOAD_ROOT_DIR"; then
            echo "Error: gdown failed to download or extract the folder."
            exit 1
          fi

          # Find the name of the folder created by gdown inside DOWNLOAD_ROOT_DIR
          # (gdown extracts to a sub-directory named after the original GDrive folder)
          EXTRACTED_FOLDER_PATH=$(find "$DOWNLOAD_ROOT_DIR" -mindepth 1 -maxdepth 1 -type d -print -quit)

          if [ -z "$EXTRACTED_FOLDER_PATH" ] || [ ! -d "$EXTRACTED_FOLDER_PATH" ]; then
            echo "Error: Could not find extracted model folder in $DOWNLOAD_ROOT_DIR."
            echo "Contents of $DOWNLOAD_ROOT_DIR:"
            ls -A "$DOWNLOAD_ROOT_DIR"
            exit 1
          fi
          
          echo "Found extracted model files at: $EXTRACTED_FOLDER_PATH"
          echo "Moving contents to $MODEL_CONTENTS_TARGET_DIR/"
          # Move the *contents* of the extracted folder to the target model directory
          # Ensure source path ends with a slash to copy contents, not the folder itself
          if ! mv "$EXTRACTED_FOLDER_PATH"/* "$MODEL_CONTENTS_TARGET_DIR/"; then
             echo "Error: Failed to move model files."
             echo "Contents of $EXTRACTED_FOLDER_PATH:"
             ls -A "$EXTRACTED_FOLDER_PATH"
             echo "Contents of $MODEL_CONTENTS_TARGET_DIR:"
             ls -A "$MODEL_CONTENTS_TARGET_DIR"
             exit 1
          fi

          # Clean up temporary download directory
          rm -rf "$DOWNLOAD_ROOT_DIR"

          # Verify key model files exist in the target directory (adjust filenames as needed)
          if [ ! -f "$MODEL_CONTENTS_TARGET_DIR/config.json" ] || [ ! -f "$MODEL_CONTENTS_TARGET_DIR/pytorch_model.bin" ]; then
            echo "Warning: Key model files (config.json or pytorch_model.bin) not found in $MODEL_CONTENTS_TARGET_DIR after preparation."
            echo "Please ensure GDRIVE_MODEL_FILE_ID points to a folder containing these files directly."
            echo "Contents of $MODEL_CONTENTS_TARGET_DIR:"
            ls -A "$MODEL_CONTENTS_TARGET_DIR"
            # Depending on your model, this might be a critical error, consider exiting:
            # exit 1 
          else
            echo "Model prepared successfully in $MODEL_CONTENTS_TARGET_DIR"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: build_and_push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/email-classification-real-estate:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/email-classification-real-estate:${{ github.sha }}
